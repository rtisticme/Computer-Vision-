#A constant and smoothbackground like white or blue except black will give the best result 
import cv2
import numpy as np
import math

def nothing(x):
    pass

cap = cv2.VideoCapture(0)

cv2.namedWindow('TrackBars')
cv2.createTrackbar('L-threshold', 'TrackBars', 1, 254, nothing)
cv2.createTrackbar('H-threshold', 'TrackBars', 1, 254, nothing)

while(cap.isOpened()):
    # read image
    ret, img = cap.read()

    # get hand data from the rectangle sub window on the screen
    cv2.rectangle(img, (320,320), (100,100), (0,255,0),0)
                        
    crop_img = img[100:320, 100:320]

    # convert to grayscale
    grey = cv2.cvtColor(crop_img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.medianBlur(grey,25) 
    cv2.imshow('Blurred Image', blurred)
    if cv2.waitKey(1) & 0xFF == ord('q'): #open video until q is pressed 
        break
    #median blur is used to remove most of the noise

    # thresholdin: Otsu's Binarization method
    t_l= cv2.getTrackbarPos('L-threshold', 'TrackBars')
    t_h= cv2.getTrackbarPos('H-threshold', 'TrackBars')
    _,thresh1 = cv2.threshold(blurred, t_l, t_h,
                               cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)

    # show thresholded image
    cv2.imshow('Thresholded', thresh1)

    if cv2.waitKey(1) & 0xFF == ord('q'): #open video until q is pressed 
        break

    image, contours, hierarchy = cv2.findContours(thresh1.copy(), \
               cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

    # find contour with max area
    cnt = max(contours, key = lambda x: cv2.contourArea(x))

    # create bounding rectangle around the contour for a better user experience 
    x, y, w, h = cv2.boundingRect(cnt)
    cv2.rectangle(crop_img, (x, y), (x+w, y+h), (0, 0, 255), 0)

    # finding convex hull
    hull = cv2.convexHull(cnt)

    # drawing contours
    drawing = np.zeros(crop_img.shape,np.uint8) #create a black window
    cv2.drawContours(drawing, [cnt], 0, (0, 255, 0), 0) #show contour in the window
    cv2.drawContours(drawing, [hull], 0,(0, 0, 255), 0) #show the convex hull in the wundow

    # finding convex hull
    hull = cv2.convexHull(cnt, returnPoints=False)

    # finding convexity defects
    defects = cv2.convexityDefects(cnt, hull)
    count_defects = 0
    cv2.drawContours(thresh1, contours, -1, (0, 255, 0), 3)

    # applying Cosine Rule to find angle for all defects (between fingers)
    # with angle > 90 degrees and ignore defects (don't understand)
    for i in range(defects.shape[0]):
        s,e,f,d = defects[i,0]

        start = tuple(cnt[s][0])
        end = tuple(cnt[e][0])
        far = tuple(cnt[f][0])

        # find length of all sides of triangle
        a = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
        b = math.sqrt((far[0] - start[0])**2 + (far[1] - start[1])**2)
        c = math.sqrt((end[0] - far[0])**2 + (end[1] - far[1])**2)

        # apply cosine rule here
        angle = math.acos((b**2 + c**2 - a**2)/(2*b*c)) * 57

        # ignore angles > 90 and highlight rest with red dots
        if angle <= 90:
            count_defects += 1
            cv2.circle(crop_img, far, 1, [0,0,255], -1)
        dist = cv2.pointPolygonTest(cnt,far,True)

        # draw a line from start to end i.e. the convex points (finger tips)
        # (can skip this part)
        cv2.line(crop_img,start, end, [0,255,0], 2)
        #cv2.circle(crop_img,far,5,[0,0,255],-1)

    # define actions required (can trigger a event) about 5 events
    if count_defects == 1:
        cv2.putText(img,"Hey It's me RT", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 2) #two fingers (Peace)
    elif count_defects == 2:
        str = "This is 3"
        cv2.putText(img, str, (5, 50), cv2.FONT_HERSHEY_SIMPLEX, 2,(255,255,255), 2) #Three fingers
    elif count_defects == 3:
        cv2.putText(img,"This is 4 :P", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2,(255,255,255), 2) #show four fingers except thumb
    elif count_defects == 4:
        cv2.putText(img,"Hi!!!", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2,(255,255,255), 2) #five fingerss
    else:
        cv2.putText(img,"Hello World!!!", (50, 50),\
                    cv2.FONT_HERSHEY_SIMPLEX, 2,(255,255,255), 2) #nothing is there

    # show appropriate images in windows
    cv2.imshow('Gesture', img)
    if cv2.waitKey(1) & 0xFF == ord('q'): #open video until q is pressed
        break

    all_img = np.hstack((drawing, crop_img))
    cv2.imshow('Contours', all_img)

    if cv2.waitKey(1) & 0xFF == ord('q'): #open video until q is pressed
        break

cap.release()
cv2.destroyAllWindows()
